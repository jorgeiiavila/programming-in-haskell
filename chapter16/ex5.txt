[] ++ ys = ys
(x:xs) ys = x : (xs ++ ys)

take 0 _ = []
take _ [] = []
take n (x:xs) = x : take (n - 1) xs

drop 0 xs = xs
drop _ [] = []
drop n (_:xs) = drop (n - 1) xs

take n xs ++ drop n xs = xs => take (n + 1) (x:xs) ++ drop (n + 1) (x:xs) = x:xs

Base case

take 0 [] ++ drop 0 xs
= { applying take }
[] ++ drop 0 xs
= { applying drop }
[] ++ []
= { applying ++ }
[]

Inductive case

take (n + 1) (x:xs) ++ drop (n + 1) (x:xs)
= { applying take }
(x : take n xs) ++ drop (n + 1) (x:xs)
= { applying ++ }
x : (take n xs ++ drop n xs)
= { induction hypothesis }
x:xs

