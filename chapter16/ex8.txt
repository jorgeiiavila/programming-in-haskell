data Tree a = Leaf a | Node (Tree a) (Tree a)

instance Functor Tree where
    -- fmap :: (a -> b) -> Tree a -> Tree b
    fmap g (Leaf x) = Leaf (g x)
    fmap g (Node l r) = Node (fmap g l) (fmap g r)

Functor laws

fmap id = id
fmap (g . h) = fmap g . fmap h

Proof of id

Case Leaf

fmap id (Leaf x)
= { applying fmap }
Leaf (id x)
= { applying id }
Leaf x
= { unapplying id }
id (Leaf x)

Case Node

fmap id (Node l r)
= { applying fmap }
Node (fmap id l) (fmap id r)
= { induction hypothesis on l }
Node l (fmap id r)
= { induction hypothesis on r }
Node l r
= { unapplying id }
id (Node l r)

Proof of composition

Case Leaf

fmap (g . h) (Leaf x)
= { applying fmap }
Leaf ((g . h) x)
= { applying . }
Leaf (g (h x))
= { unapplying fmap }
fmap g (Leaf (h x))
= { unapplying fmap }
fmap g (fmap h (Leaf x))
= { unapplying . }
(fmap g . fmap h) (Leaf x)

Case Node

fmap (g . h) (Node l r)
= { applying fmap }
Node (fmap (g . h) l) (fmap (g . h) r)
= { induction hypothesis on l }
Node ((fmap g . fmap h) l) (fmap (g . h) r)
= { induction hypothesis on r }
Node ((fmap g . fmap h) l) ((fmap g . fmap h) r)
= { applying left . }
Node (fmap g (fmap h l)) ((fmap g . fmap h) r)
= { applying right . }
Node (fmap g (fmap h l)) (fmap g (fmap h r))
= { unapplying fmap }
fmap g (Node (fmap h l) (fmap h r))
= { unapplying inner fmap }
fmap g (fmap h (Node l r))
= { unapplying . }
(fmap g . fmap h) (Node l r)

