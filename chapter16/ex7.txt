fmap id = id
fmap (f . g) = fmap f . fmap g

fmap :: (a -> b) -> Maybe a -> Maybe b
fmap f Nothing = Nothing
fmap f (Just x) = Just (f x)

Proof of id

Case Nothing

fmap id Nothing
= { applying fmap }
Nothing
= { unapplying id }
id Nothing

Case Just

fmap id (Just x)
= { applying fmap }
Just (id x)
= { applying id }
Just x
= { unapplying id }
id (Just x)

Proof of composition

Case Nothing

fmap (f . g) Nothing
= { applying fmap }
Nothing
= { unapplying fmap }
fmap f Nothing
= { unapplying fmap }
fmap f (fmap g Nothing)
= { unapplying . }
(fmap f . fmap g) Nothing

Case Just

fmap (f . g) (Just x)
= { applying fmap }
Just ((f . g) x)
= { applying . }
Just (f (g x))
= { unapplying fmap }
fmap f (Just (g x))
= { unapplying fmap }
fmap f (fmap g (Just x))
= { unapplying . }
(fmap f . fmap g) (Just x)
